import unittest
from gtree import *


class TestTreeNode(object):
    def __init__(self, name, children=None):
        self.name = name
        self.children = children
        self.foo = 'foo'
        self.bar = 'bar'
        if self.children is None:
            self.children = []

    def get_children(self):
        return self.children

    def __str__(self):
        return str(self.name)


class TestTreeNodeOtherAttrs(TestTreeNode):
    def __init__(self, name):
        TestTreeNode.__init__(self, name)
        self.foobar = 'foobar'


class TestTreeMethod(unittest.TestCase):
    def test_tree_without_extras(self):
        output_tree = [('───┬', '0'), ('   ├──┬', '0'), ('   │  ├──┬', '0'), ('   │  │  ├──┬', '0'),
                       ('   │  │  │  ├──┬', '0'), ('   │  │  │  │  ├───', '0'), ('   │  │  │  │  └───', '1'),
                       ('   │  │  │  └──┬', '1'), ('   │  │  │     ├───', '0'), ('   │  │  │     └───', '1'),
                       ('   │  │  └──┬', '1'), ('   │  │     ├──┬', '0'), ('   │  │     │  ├───', '0'),
                       ('   │  │     │  └───', '1'), ('   │  │     └──┬', '1'), ('   │  │        ├───', '0'),
                       ('   │  │        └───', '1'), ('   │  └──┬', '1'), ('   │     ├──┬', '0'),
                       ('   │     │  ├──┬', '0'), ('   │     │  │  ├───', '0'), ('   │     │  │  └───', '1'),
                       ('   │     │  └──┬', '1'), ('   │     │     ├───', '0'), ('   │     │     └───', '1'),
                       ('   │     └──┬', '1'), ('   │        ├──┬', '0'), ('   │        │  ├───', '0'),
                       ('   │        │  └───', '1'), ('   │        └──┬', '1'), ('   │           ├───', '0'),
                       ('   │           └───', '1'), ('   └──┬', '1'), ('      ├──┬', '0'), ('      │  ├──┬', '0'),
                       ('      │  │  ├──┬', '0'), ('      │  │  │  ├───', '0'), ('      │  │  │  └───', '1'),
                       ('      │  │  └──┬', '1'), ('      │  │     ├───', '0'), ('      │  │     └───', '1'),
                       ('      │  └──┬', '1'), ('      │     ├──┬', '0'), ('      │     │  ├───', '0'),
                       ('      │     │  └───', '1'), ('      │     └──┬', '1'), ('      │        ├───', '0'),
                       ('      │        └───', '1'), ('      └──┬', '1'), ('         ├──┬', '0'),
                       ('         │  ├──┬', '0'), ('         │  │  ├───', '0'), ('         │  │  └───', '1'),
                       ('         │  └──┬', '1'), ('         │     ├───', '0'), ('         │     └───', '1'),
                       ('         └──┬', '1'), ('            ├──┬', '0'), ('            │  ├───', '0'),
                       ('            │  └───', '1'), ('            └──┬', '1'), ('               ├───', '0'),
                       ('               └───', '1'), ('───┬', '1'), ('   ├──┬', '0'), ('   │  ├──┬', '0'),
                       ('   │  │  ├──┬', '0'), ('   │  │  │  ├──┬', '0'), ('   │  │  │  │  ├───', '0'),
                       ('   │  │  │  │  └───', '1'), ('   │  │  │  └──┬', '1'), ('   │  │  │     ├───', '0'),
                       ('   │  │  │     └───', '1'), ('   │  │  └──┬', '1'), ('   │  │     ├──┬', '0'),
                       ('   │  │     │  ├───', '0'), ('   │  │     │  └───', '1'), ('   │  │     └──┬', '1'),
                       ('   │  │        ├───', '0'), ('   │  │        └───', '1'), ('   │  └──┬', '1'),
                       ('   │     ├──┬', '0'), ('   │     │  ├──┬', '0'), ('   │     │  │  ├───', '0'),
                       ('   │     │  │  └───', '1'), ('   │     │  └──┬', '1'), ('   │     │     ├───', '0'),
                       ('   │     │     └───', '1'), ('   │     └──┬', '1'), ('   │        ├──┬', '0'),
                       ('   │        │  ├───', '0'), ('   │        │  └───', '1'), ('   │        └──┬', '1'),
                       ('   │           ├───', '0'), ('   │           └───', '1'), ('   └──┬', '1'),
                       ('      ├──┬', '0'), ('      │  ├──┬', '0'), ('      │  │  ├──┬', '0'),
                       ('      │  │  │  ├───', '0'), ('      │  │  │  └───', '1'), ('      │  │  └──┬', '1'),
                       ('      │  │     ├───', '0'), ('      │  │     └───', '1'), ('      │  └──┬', '1'),
                       ('      │     ├──┬', '0'), ('      │     │  ├───', '0'), ('      │     │  └───', '1'),
                       ('      │     └──┬', '1'), ('      │        ├───', '0'), ('      │        └───', '1'),
                       ('      └──┬', '1'), ('         ├──┬', '0'), ('         │  ├──┬', '0'),
                       ('         │  │  ├───', '0'), ('         │  │  └───', '1'), ('         │  └──┬', '1'),
                       ('         │     ├───', '0'), ('         │     └───', '1'), ('         └──┬', '1'),
                       ('            ├──┬', '0'), ('            │  ├───', '0'), ('            │  └───', '1'),
                       ('            └──┬', '1'), ('               ├───', '0'), ('               └───', '1')]

        x = 0
        y = 2

        tree_nodes = \
            [TestTreeNode(i, children=[
                TestTreeNode(ii, children=[
                    TestTreeNode(ii, children=[
                        TestTreeNode(ii, children=[
                            TestTreeNode(ii, children=[
                                TestTreeNode(ii) for ii in range(x, y)
                            ]) for ii in range(x, y)
                        ]) for ii in range(x, y)]) for ii in range(x, y)]) for ii in
                range(x, y)]) for i in range(x, y)]
        t = tree(tree_nodes, children_property='get_children')
        prefix_line_tree = [tupl[:-1] for tupl in t]
        self.assertEqual(prefix_line_tree, output_tree)

    def test_tree_with_extras(self):
        output_tree = [('───┬', '0'), ('   ├───', 'foo'), ('   ├───', 'bar'), ('   ├──┬', '0'), ('   │  ├───', 'foo'),
                       ('   │  ├───', 'bar'), ('   │  ├──┬', '0'), ('   │  │  ├───', 'foo'), ('   │  │  ├───', 'bar'),
                       ('   │  │  ├──┬', '0'), ('   │  │  │  ├───', 'foo'), ('   │  │  │  ├───', 'bar'),
                       ('   │  │  │  ├──┬', '0'), ('   │  │  │  │  ├───', 'foo'), ('   │  │  │  │  ├───', 'bar'),
                       ('   │  │  │  │  ├──┬', '0'), ('   │  │  │  │  │  ├───', 'foo'),
                       ('   │  │  │  │  │  ├───', 'bar'), ('   │  │  │  │  │  └───', 'foobar'),
                       ('   │  │  │  │  └──┬', '1'), ('   │  │  │  │     ├───', 'foo'),
                       ('   │  │  │  │     ├───', 'bar'), ('   │  │  │  │     └───', 'foobar'),
                       ('   │  │  │  └──┬', '1'), ('   │  │  │     ├───', 'foo'), ('   │  │  │     ├───', 'bar'),
                       ('   │  │  │     ├──┬', '0'), ('   │  │  │     │  ├───', 'foo'),
                       ('   │  │  │     │  ├───', 'bar'), ('   │  │  │     │  └───', 'foobar'),
                       ('   │  │  │     └──┬', '1'), ('   │  │  │        ├───', 'foo'),
                       ('   │  │  │        ├───', 'bar'), ('   │  │  │        └───', 'foobar'), ('   │  │  └──┬', '1'),
                       ('   │  │     ├───', 'foo'), ('   │  │     ├───', 'bar'), ('   │  │     ├──┬', '0'),
                       ('   │  │     │  ├───', 'foo'), ('   │  │     │  ├───', 'bar'), ('   │  │     │  ├──┬', '0'),
                       ('   │  │     │  │  ├───', 'foo'), ('   │  │     │  │  ├───', 'bar'),
                       ('   │  │     │  │  └───', 'foobar'), ('   │  │     │  └──┬', '1'),
                       ('   │  │     │     ├───', 'foo'), ('   │  │     │     ├───', 'bar'),
                       ('   │  │     │     └───', 'foobar'), ('   │  │     └──┬', '1'), ('   │  │        ├───', 'foo'),
                       ('   │  │        ├───', 'bar'), ('   │  │        ├──┬', '0'), ('   │  │        │  ├───', 'foo'),
                       ('   │  │        │  ├───', 'bar'), ('   │  │        │  └───', 'foobar'),
                       ('   │  │        └──┬', '1'), ('   │  │           ├───', 'foo'),
                       ('   │  │           ├───', 'bar'), ('   │  │           └───', 'foobar'), ('   │  └──┬', '1'),
                       ('   │     ├───', 'foo'), ('   │     ├───', 'bar'), ('   │     ├──┬', '0'),
                       ('   │     │  ├───', 'foo'), ('   │     │  ├───', 'bar'), ('   │     │  ├──┬', '0'),
                       ('   │     │  │  ├───', 'foo'), ('   │     │  │  ├───', 'bar'), ('   │     │  │  ├──┬', '0'),
                       ('   │     │  │  │  ├───', 'foo'), ('   │     │  │  │  ├───', 'bar'),
                       ('   │     │  │  │  └───', 'foobar'), ('   │     │  │  └──┬', '1'),
                       ('   │     │  │     ├───', 'foo'), ('   │     │  │     ├───', 'bar'),
                       ('   │     │  │     └───', 'foobar'), ('   │     │  └──┬', '1'), ('   │     │     ├───', 'foo'),
                       ('   │     │     ├───', 'bar'), ('   │     │     ├──┬', '0'), ('   │     │     │  ├───', 'foo'),
                       ('   │     │     │  ├───', 'bar'), ('   │     │     │  └───', 'foobar'),
                       ('   │     │     └──┬', '1'), ('   │     │        ├───', 'foo'),
                       ('   │     │        ├───', 'bar'), ('   │     │        └───', 'foobar'), ('   │     └──┬', '1'),
                       ('   │        ├───', 'foo'), ('   │        ├───', 'bar'), ('   │        ├──┬', '0'),
                       ('   │        │  ├───', 'foo'), ('   │        │  ├───', 'bar'), ('   │        │  ├──┬', '0'),
                       ('   │        │  │  ├───', 'foo'), ('   │        │  │  ├───', 'bar'),
                       ('   │        │  │  └───', 'foobar'), ('   │        │  └──┬', '1'),
                       ('   │        │     ├───', 'foo'), ('   │        │     ├───', 'bar'),
                       ('   │        │     └───', 'foobar'), ('   │        └──┬', '1'), ('   │           ├───', 'foo'),
                       ('   │           ├───', 'bar'), ('   │           ├──┬', '0'), ('   │           │  ├───', 'foo'),
                       ('   │           │  ├───', 'bar'), ('   │           │  └───', 'foobar'),
                       ('   │           └──┬', '1'), ('   │              ├───', 'foo'),
                       ('   │              ├───', 'bar'), ('   │              └───', 'foobar'), ('   └──┬', '1'),
                       ('      ├───', 'foo'), ('      ├───', 'bar'), ('      ├──┬', '0'), ('      │  ├───', 'foo'),
                       ('      │  ├───', 'bar'), ('      │  ├──┬', '0'), ('      │  │  ├───', 'foo'),
                       ('      │  │  ├───', 'bar'), ('      │  │  ├──┬', '0'), ('      │  │  │  ├───', 'foo'),
                       ('      │  │  │  ├───', 'bar'), ('      │  │  │  ├──┬', '0'), ('      │  │  │  │  ├───', 'foo'),
                       ('      │  │  │  │  ├───', 'bar'), ('      │  │  │  │  └───', 'foobar'),
                       ('      │  │  │  └──┬', '1'), ('      │  │  │     ├───', 'foo'),
                       ('      │  │  │     ├───', 'bar'), ('      │  │  │     └───', 'foobar'),
                       ('      │  │  └──┬', '1'), ('      │  │     ├───', 'foo'), ('      │  │     ├───', 'bar'),
                       ('      │  │     ├──┬', '0'), ('      │  │     │  ├───', 'foo'),
                       ('      │  │     │  ├───', 'bar'), ('      │  │     │  └───', 'foobar'),
                       ('      │  │     └──┬', '1'), ('      │  │        ├───', 'foo'),
                       ('      │  │        ├───', 'bar'), ('      │  │        └───', 'foobar'), ('      │  └──┬', '1'),
                       ('      │     ├───', 'foo'), ('      │     ├───', 'bar'), ('      │     ├──┬', '0'),
                       ('      │     │  ├───', 'foo'), ('      │     │  ├───', 'bar'), ('      │     │  ├──┬', '0'),
                       ('      │     │  │  ├───', 'foo'), ('      │     │  │  ├───', 'bar'),
                       ('      │     │  │  └───', 'foobar'), ('      │     │  └──┬', '1'),
                       ('      │     │     ├───', 'foo'), ('      │     │     ├───', 'bar'),
                       ('      │     │     └───', 'foobar'), ('      │     └──┬', '1'), ('      │        ├───', 'foo'),
                       ('      │        ├───', 'bar'), ('      │        ├──┬', '0'), ('      │        │  ├───', 'foo'),
                       ('      │        │  ├───', 'bar'), ('      │        │  └───', 'foobar'),
                       ('      │        └──┬', '1'), ('      │           ├───', 'foo'),
                       ('      │           ├───', 'bar'), ('      │           └───', 'foobar'), ('      └──┬', '1'),
                       ('         ├───', 'foo'), ('         ├───', 'bar'), ('         ├──┬', '0'),
                       ('         │  ├───', 'foo'), ('         │  ├───', 'bar'), ('         │  ├──┬', '0'),
                       ('         │  │  ├───', 'foo'), ('         │  │  ├───', 'bar'), ('         │  │  ├──┬', '0'),
                       ('         │  │  │  ├───', 'foo'), ('         │  │  │  ├───', 'bar'),
                       ('         │  │  │  └───', 'foobar'), ('         │  │  └──┬', '1'),
                       ('         │  │     ├───', 'foo'), ('         │  │     ├───', 'bar'),
                       ('         │  │     └───', 'foobar'), ('         │  └──┬', '1'), ('         │     ├───', 'foo'),
                       ('         │     ├───', 'bar'), ('         │     ├──┬', '0'), ('         │     │  ├───', 'foo'),
                       ('         │     │  ├───', 'bar'), ('         │     │  └───', 'foobar'),
                       ('         │     └──┬', '1'), ('         │        ├───', 'foo'),
                       ('         │        ├───', 'bar'), ('         │        └───', 'foobar'), ('         └──┬', '1'),
                       ('            ├───', 'foo'), ('            ├───', 'bar'), ('            ├──┬', '0'),
                       ('            │  ├───', 'foo'), ('            │  ├───', 'bar'), ('            │  ├──┬', '0'),
                       ('            │  │  ├───', 'foo'), ('            │  │  ├───', 'bar'),
                       ('            │  │  └───', 'foobar'), ('            │  └──┬', '1'),
                       ('            │     ├───', 'foo'), ('            │     ├───', 'bar'),
                       ('            │     └───', 'foobar'), ('            └──┬', '1'), ('               ├───', 'foo'),
                       ('               ├───', 'bar'), ('               ├──┬', '0'), ('               │  ├───', 'foo'),
                       ('               │  ├───', 'bar'), ('               │  └───', 'foobar'),
                       ('               └──┬', '1'), ('                  ├───', 'foo'),
                       ('                  ├───', 'bar'), ('                  └───', 'foobar'), ('───┬', '1'),
                       ('   ├───', 'foo'), ('   ├───', 'bar'), ('   ├──┬', '0'), ('   │  ├───', 'foo'),
                       ('   │  ├───', 'bar'), ('   │  ├──┬', '0'), ('   │  │  ├───', 'foo'), ('   │  │  ├───', 'bar'),
                       ('   │  │  ├──┬', '0'), ('   │  │  │  ├───', 'foo'), ('   │  │  │  ├───', 'bar'),
                       ('   │  │  │  ├──┬', '0'), ('   │  │  │  │  ├───', 'foo'), ('   │  │  │  │  ├───', 'bar'),
                       ('   │  │  │  │  ├──┬', '0'), ('   │  │  │  │  │  ├───', 'foo'),
                       ('   │  │  │  │  │  ├───', 'bar'), ('   │  │  │  │  │  └───', 'foobar'),
                       ('   │  │  │  │  └──┬', '1'), ('   │  │  │  │     ├───', 'foo'),
                       ('   │  │  │  │     ├───', 'bar'), ('   │  │  │  │     └───', 'foobar'),
                       ('   │  │  │  └──┬', '1'), ('   │  │  │     ├───', 'foo'), ('   │  │  │     ├───', 'bar'),
                       ('   │  │  │     ├──┬', '0'), ('   │  │  │     │  ├───', 'foo'),
                       ('   │  │  │     │  ├───', 'bar'), ('   │  │  │     │  └───', 'foobar'),
                       ('   │  │  │     └──┬', '1'), ('   │  │  │        ├───', 'foo'),
                       ('   │  │  │        ├───', 'bar'), ('   │  │  │        └───', 'foobar'), ('   │  │  └──┬', '1'),
                       ('   │  │     ├───', 'foo'), ('   │  │     ├───', 'bar'), ('   │  │     ├──┬', '0'),
                       ('   │  │     │  ├───', 'foo'), ('   │  │     │  ├───', 'bar'), ('   │  │     │  ├──┬', '0'),
                       ('   │  │     │  │  ├───', 'foo'), ('   │  │     │  │  ├───', 'bar'),
                       ('   │  │     │  │  └───', 'foobar'), ('   │  │     │  └──┬', '1'),
                       ('   │  │     │     ├───', 'foo'), ('   │  │     │     ├───', 'bar'),
                       ('   │  │     │     └───', 'foobar'), ('   │  │     └──┬', '1'), ('   │  │        ├───', 'foo'),
                       ('   │  │        ├───', 'bar'), ('   │  │        ├──┬', '0'), ('   │  │        │  ├───', 'foo'),
                       ('   │  │        │  ├───', 'bar'), ('   │  │        │  └───', 'foobar'),
                       ('   │  │        └──┬', '1'), ('   │  │           ├───', 'foo'),
                       ('   │  │           ├───', 'bar'), ('   │  │           └───', 'foobar'), ('   │  └──┬', '1'),
                       ('   │     ├───', 'foo'), ('   │     ├───', 'bar'), ('   │     ├──┬', '0'),
                       ('   │     │  ├───', 'foo'), ('   │     │  ├───', 'bar'), ('   │     │  ├──┬', '0'),
                       ('   │     │  │  ├───', 'foo'), ('   │     │  │  ├───', 'bar'), ('   │     │  │  ├──┬', '0'),
                       ('   │     │  │  │  ├───', 'foo'), ('   │     │  │  │  ├───', 'bar'),
                       ('   │     │  │  │  └───', 'foobar'), ('   │     │  │  └──┬', '1'),
                       ('   │     │  │     ├───', 'foo'), ('   │     │  │     ├───', 'bar'),
                       ('   │     │  │     └───', 'foobar'), ('   │     │  └──┬', '1'), ('   │     │     ├───', 'foo'),
                       ('   │     │     ├───', 'bar'), ('   │     │     ├──┬', '0'), ('   │     │     │  ├───', 'foo'),
                       ('   │     │     │  ├───', 'bar'), ('   │     │     │  └───', 'foobar'),
                       ('   │     │     └──┬', '1'), ('   │     │        ├───', 'foo'),
                       ('   │     │        ├───', 'bar'), ('   │     │        └───', 'foobar'), ('   │     └──┬', '1'),
                       ('   │        ├───', 'foo'), ('   │        ├───', 'bar'), ('   │        ├──┬', '0'),
                       ('   │        │  ├───', 'foo'), ('   │        │  ├───', 'bar'), ('   │        │  ├──┬', '0'),
                       ('   │        │  │  ├───', 'foo'), ('   │        │  │  ├───', 'bar'),
                       ('   │        │  │  └───', 'foobar'), ('   │        │  └──┬', '1'),
                       ('   │        │     ├───', 'foo'), ('   │        │     ├───', 'bar'),
                       ('   │        │     └───', 'foobar'), ('   │        └──┬', '1'), ('   │           ├───', 'foo'),
                       ('   │           ├───', 'bar'), ('   │           ├──┬', '0'), ('   │           │  ├───', 'foo'),
                       ('   │           │  ├───', 'bar'), ('   │           │  └───', 'foobar'),
                       ('   │           └──┬', '1'), ('   │              ├───', 'foo'),
                       ('   │              ├───', 'bar'), ('   │              └───', 'foobar'), ('   └──┬', '1'),
                       ('      ├───', 'foo'), ('      ├───', 'bar'), ('      ├──┬', '0'), ('      │  ├───', 'foo'),
                       ('      │  ├───', 'bar'), ('      │  ├──┬', '0'), ('      │  │  ├───', 'foo'),
                       ('      │  │  ├───', 'bar'), ('      │  │  ├──┬', '0'), ('      │  │  │  ├───', 'foo'),
                       ('      │  │  │  ├───', 'bar'), ('      │  │  │  ├──┬', '0'), ('      │  │  │  │  ├───', 'foo'),
                       ('      │  │  │  │  ├───', 'bar'), ('      │  │  │  │  └───', 'foobar'),
                       ('      │  │  │  └──┬', '1'), ('      │  │  │     ├───', 'foo'),
                       ('      │  │  │     ├───', 'bar'), ('      │  │  │     └───', 'foobar'),
                       ('      │  │  └──┬', '1'), ('      │  │     ├───', 'foo'), ('      │  │     ├───', 'bar'),
                       ('      │  │     ├──┬', '0'), ('      │  │     │  ├───', 'foo'),
                       ('      │  │     │  ├───', 'bar'), ('      │  │     │  └───', 'foobar'),
                       ('      │  │     └──┬', '1'), ('      │  │        ├───', 'foo'),
                       ('      │  │        ├───', 'bar'), ('      │  │        └───', 'foobar'), ('      │  └──┬', '1'),
                       ('      │     ├───', 'foo'), ('      │     ├───', 'bar'), ('      │     ├──┬', '0'),
                       ('      │     │  ├───', 'foo'), ('      │     │  ├───', 'bar'), ('      │     │  ├──┬', '0'),
                       ('      │     │  │  ├───', 'foo'), ('      │     │  │  ├───', 'bar'),
                       ('      │     │  │  └───', 'foobar'), ('      │     │  └──┬', '1'),
                       ('      │     │     ├───', 'foo'), ('      │     │     ├───', 'bar'),
                       ('      │     │     └───', 'foobar'), ('      │     └──┬', '1'), ('      │        ├───', 'foo'),
                       ('      │        ├───', 'bar'), ('      │        ├──┬', '0'), ('      │        │  ├───', 'foo'),
                       ('      │        │  ├───', 'bar'), ('      │        │  └───', 'foobar'),
                       ('      │        └──┬', '1'), ('      │           ├───', 'foo'),
                       ('      │           ├───', 'bar'), ('      │           └───', 'foobar'), ('      └──┬', '1'),
                       ('         ├───', 'foo'), ('         ├───', 'bar'), ('         ├──┬', '0'),
                       ('         │  ├───', 'foo'), ('         │  ├───', 'bar'), ('         │  ├──┬', '0'),
                       ('         │  │  ├───', 'foo'), ('         │  │  ├───', 'bar'), ('         │  │  ├──┬', '0'),
                       ('         │  │  │  ├───', 'foo'), ('         │  │  │  ├───', 'bar'),
                       ('         │  │  │  └───', 'foobar'), ('         │  │  └──┬', '1'),
                       ('         │  │     ├───', 'foo'), ('         │  │     ├───', 'bar'),
                       ('         │  │     └───', 'foobar'), ('         │  └──┬', '1'), ('         │     ├───', 'foo'),
                       ('         │     ├───', 'bar'), ('         │     ├──┬', '0'), ('         │     │  ├───', 'foo'),
                       ('         │     │  ├───', 'bar'), ('         │     │  └───', 'foobar'),
                       ('         │     └──┬', '1'), ('         │        ├───', 'foo'),
                       ('         │        ├───', 'bar'), ('         │        └───', 'foobar'), ('         └──┬', '1'),
                       ('            ├───', 'foo'), ('            ├───', 'bar'), ('            ├──┬', '0'),
                       ('            │  ├───', 'foo'), ('            │  ├───', 'bar'), ('            │  ├──┬', '0'),
                       ('            │  │  ├───', 'foo'), ('            │  │  ├───', 'bar'),
                       ('            │  │  └───', 'foobar'), ('            │  └──┬', '1'),
                       ('            │     ├───', 'foo'), ('            │     ├───', 'bar'),
                       ('            │     └───', 'foobar'), ('            └──┬', '1'), ('               ├───', 'foo'),
                       ('               ├───', 'bar'), ('               ├──┬', '0'), ('               │  ├───', 'foo'),
                       ('               │  ├───', 'bar'), ('               │  └───', 'foobar'),
                       ('               └──┬', '1'), ('                  ├───', 'foo'),
                       ('                  ├───', 'bar'), ('                  └───', 'foobar')]
        x = 0
        y = 2

        tree_nodes = \
            [TestTreeNode(i, children=[
                TestTreeNode(ii, children=[
                    TestTreeNode(ii, children=[
                        TestTreeNode(ii, children=[
                            TestTreeNode(ii, children=[
                                TestTreeNodeOtherAttrs(ii) for ii in range(x, y)
                            ]) for ii in range(x, y)
                        ]) for ii in range(x, y)]) for ii in range(x, y)]) for ii in
                range(x, y)]) for i in range(x, y)]

        t = tree(tree_nodes, children_property='get_children',
                 extra_children_properties=['foo', 'bar', 'foobar', 'barfoo'])
        prefix_line_tree = [(prefix, line) for prefix, line, _ in t]
        self.assertEqual(prefix_line_tree, output_tree)
